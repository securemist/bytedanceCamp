// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: relation.proto

package douyin_extra_second

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RelationClient is the client API for Relation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelationClient interface {
	RelationAction(ctx context.Context, in *RelationActionRequest, opts ...grpc.CallOption) (*RelationActionResponse, error)
	RelationFollowList(ctx context.Context, in *RelationFollowListRequest, opts ...grpc.CallOption) (*RelationFollowListResponse, error)
	RelationFansList(ctx context.Context, in *RelationFansListRequest, opts ...grpc.CallOption) (*RelationFansListResponse, error)
	RelationAddFriend(ctx context.Context, in *RelationAddFriendRequest, opts ...grpc.CallOption) (*RelationAddFriendResponse, error)
	RelationFriendList(ctx context.Context, in *RelationFriendListRequest, opts ...grpc.CallOption) (*RelationFriendListResponse, error)
}

type relationClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationClient(cc grpc.ClientConnInterface) RelationClient {
	return &relationClient{cc}
}

func (c *relationClient) RelationAction(ctx context.Context, in *RelationActionRequest, opts ...grpc.CallOption) (*RelationActionResponse, error) {
	out := new(RelationActionResponse)
	err := c.cc.Invoke(ctx, "/douyin.extra.second.Relation/RelationAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) RelationFollowList(ctx context.Context, in *RelationFollowListRequest, opts ...grpc.CallOption) (*RelationFollowListResponse, error) {
	out := new(RelationFollowListResponse)
	err := c.cc.Invoke(ctx, "/douyin.extra.second.Relation/RelationFollowList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) RelationFansList(ctx context.Context, in *RelationFansListRequest, opts ...grpc.CallOption) (*RelationFansListResponse, error) {
	out := new(RelationFansListResponse)
	err := c.cc.Invoke(ctx, "/douyin.extra.second.Relation/RelationFansList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) RelationAddFriend(ctx context.Context, in *RelationAddFriendRequest, opts ...grpc.CallOption) (*RelationAddFriendResponse, error) {
	out := new(RelationAddFriendResponse)
	err := c.cc.Invoke(ctx, "/douyin.extra.second.Relation/RelationAddFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) RelationFriendList(ctx context.Context, in *RelationFriendListRequest, opts ...grpc.CallOption) (*RelationFriendListResponse, error) {
	out := new(RelationFriendListResponse)
	err := c.cc.Invoke(ctx, "/douyin.extra.second.Relation/RelationFriendList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationServer is the server API for Relation service.
// All implementations must embed UnimplementedRelationServer
// for forward compatibility
type RelationServer interface {
	RelationAction(context.Context, *RelationActionRequest) (*RelationActionResponse, error)
	RelationFollowList(context.Context, *RelationFollowListRequest) (*RelationFollowListResponse, error)
	RelationFansList(context.Context, *RelationFansListRequest) (*RelationFansListResponse, error)
	RelationAddFriend(context.Context, *RelationAddFriendRequest) (*RelationAddFriendResponse, error)
	RelationFriendList(context.Context, *RelationFriendListRequest) (*RelationFriendListResponse, error)
	mustEmbedUnimplementedRelationServer()
}

// UnimplementedRelationServer must be embedded to have forward compatible implementations.
type UnimplementedRelationServer struct {
}

func (UnimplementedRelationServer) RelationAction(context.Context, *RelationActionRequest) (*RelationActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationAction not implemented")
}
func (UnimplementedRelationServer) RelationFollowList(context.Context, *RelationFollowListRequest) (*RelationFollowListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationFollowList not implemented")
}
func (UnimplementedRelationServer) RelationFansList(context.Context, *RelationFansListRequest) (*RelationFansListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationFansList not implemented")
}
func (UnimplementedRelationServer) RelationAddFriend(context.Context, *RelationAddFriendRequest) (*RelationAddFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationAddFriend not implemented")
}
func (UnimplementedRelationServer) RelationFriendList(context.Context, *RelationFriendListRequest) (*RelationFriendListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationFriendList not implemented")
}
func (UnimplementedRelationServer) mustEmbedUnimplementedRelationServer() {}

// UnsafeRelationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationServer will
// result in compilation errors.
type UnsafeRelationServer interface {
	mustEmbedUnimplementedRelationServer()
}

func RegisterRelationServer(s grpc.ServiceRegistrar, srv RelationServer) {
	s.RegisterService(&Relation_ServiceDesc, srv)
}

func _Relation_RelationAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).RelationAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/douyin.extra.second.Relation/RelationAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).RelationAction(ctx, req.(*RelationActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_RelationFollowList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationFollowListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).RelationFollowList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/douyin.extra.second.Relation/RelationFollowList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).RelationFollowList(ctx, req.(*RelationFollowListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_RelationFansList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationFansListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).RelationFansList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/douyin.extra.second.Relation/RelationFansList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).RelationFansList(ctx, req.(*RelationFansListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_RelationAddFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationAddFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).RelationAddFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/douyin.extra.second.Relation/RelationAddFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).RelationAddFriend(ctx, req.(*RelationAddFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_RelationFriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationFriendListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).RelationFriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/douyin.extra.second.Relation/RelationFriendList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).RelationFriendList(ctx, req.(*RelationFriendListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Relation_ServiceDesc is the grpc.ServiceDesc for Relation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Relation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "douyin.extra.second.Relation",
	HandlerType: (*RelationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RelationAction",
			Handler:    _Relation_RelationAction_Handler,
		},
		{
			MethodName: "RelationFollowList",
			Handler:    _Relation_RelationFollowList_Handler,
		},
		{
			MethodName: "RelationFansList",
			Handler:    _Relation_RelationFansList_Handler,
		},
		{
			MethodName: "RelationAddFriend",
			Handler:    _Relation_RelationAddFriend_Handler,
		},
		{
			MethodName: "RelationFriendList",
			Handler:    _Relation_RelationFriendList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relation.proto",
}
